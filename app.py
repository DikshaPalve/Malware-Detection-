import numpy as np
import pefile
import pickle
from flask import Flask, request, render_template
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import sklearn
import os
import glob

THIS_DIR = os.path.dirname(os.path.realpath(__file__))
save_path = os.path.join(THIS_DIR, 'uploadedfiles', 'inputfile.exe')
malwareimg_path = './static/img/malimg.jpg'
safeimg_path = './static/img/safeimg.jpg'
errorimg = './static/img/travolta.gif'

#extracting feature from pefiles(exe file)
def createDataframeFromPEdump(pe):

	dosHeaders = ['e_magic', 'e_cblp', 'e_cp', 'e_crlc', 'e_cparhdr',
	       'e_minalloc', 'e_maxalloc', 'e_ss', 'e_sp', 'e_csum', 'e_ip', 'e_cs',
	       'e_lfarlc', 'e_ovno', 'e_oemid', 'e_oeminfo', 'e_lfanew']
	fileHeaders=['Machine',
	       'NumberOfSections', 'TimeDateStamp', 'PointerToSymbolTable',
	       'NumberOfSymbols', 'SizeOfOptionalHeader', 'Characteristics']
	optionalHeaders=['Magic',
	       'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',
	       'SizeOfInitializedData', 'SizeOfUninitializedData','AddressOfEntryPoint', 'BaseOfCode',
	        'ImageBase', 'SectionAlignment','FileAlignment', 'MajorOperatingSystemVersion',
	       'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',
	       'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfHeaders',
	       'CheckSum', 'SizeOfImage', 'Subsystem', 'DllCharacteristics',
	       'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',
	       'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes']
	imageDirectory = ['ImageDirectoryEntryExport', 'ImageDirectoryEntryImport',
	       'ImageDirectoryEntryResource', 'ImageDirectoryEntryException',
	       'ImageDirectoryEntrySecurity']

	dheaders = {}
	fheaders = {}
	oheaders={}
	imd1 = {}

	for x in dosHeaders:
		dheaders[x] = getattr(pe.DOS_HEADER,x)
	df = pd.DataFrame(dheaders,index=[0])

	for i in fileHeaders:
		fheaders[i] = getattr(pe.FILE_HEADER,i)
	df = pd.concat([df,(pd.DataFrame(fheaders,index=[0]))],axis=1)

	for y in optionalHeaders:
		oheaders[y] = getattr(pe.OPTIONAL_HEADER,y)
	df = pd.concat([df,(pd.DataFrame(oheaders,index=[0]))],axis=1)


	return df



# Loading ML model
model = pickle.load(open('./Models/best_model.sav', 'rb'))

# Create application
app = Flask(__name__)


ALLOWED_EXTENSIONS = {'exe'}

def allowed_file(filename):
  return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/')
def home(): 
    return render_template('index.html')

@app.route('/showclf')
def showclf():
    return render_template('Classifier.html')


@app.route('/mlprediction', methods=['POST'])
def mlprediction():
    file = None
    file = request.files['file']
    print(file)


    if file and allowed_file(file.filename):
        #prediction
        file.save(save_path)
        content = pefile.PE(save_path)
        img = None
        dataframe = createDataframeFromPEdump(content)
        prediction = model.predict(dataframe)
        output = prediction[0]
        print(output)
        content.close()
        if output == 1:
            return render_template('Classifier.html',
                                result='UPLOADED PE FILE DETECTED AS : ', positive='MALWARE', res2='Risk is HIGH', image = malwareimg_path)
        else:
            return render_template('Classifier.html',
                                result='UPLOADED PE FILE DETECTED AS : ', positive='BENIGN', res2='Risk is LOW', image = safeimg_path)
    
    else:
        return render_template('Classifier.html', result='UPLOADED FILE EXTENSION IS NOT CORRECT YOU NEED TO UPLOAD EXE FILE...', image = errorimg)


if __name__ == '__main__':
    # Run the application
    app.run(debug=True)


